#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void) {
    
    void sigint_handler(int sig);
 char s[200];
 if (signal(SIGINT, sigint_handler) == SIG_ERR){
 perror("signal");
 exit(1);
 }
    
    int i, fd[2];
    char message[20];

 if(pipe(fd) == -1) {
    perror("pipe");
    exit(EXIT_FAILURE);
 }
    printf("Enter a message to send to the child processes: ");
    fgets(message, 20, stdin);

    
 for(int i = 0; i < 3; i++) {
pid_t pid = fork();
 
 if (pid == -1) {
            printf("Error: Failed to create child process.\n");
            exit(1);}
            
 else if(pid == 0) {
    close(fd[1]); 
            read(fd[0], message, 20);
            printf("Child process %d with PPID %d received message: %s", i+1, getpid(), message);
            exit(0);
 }
 else {
 printf("\n");
 printf("Parent process with PID %d created child process %d with PPID %d\n", getpid(), i+1, pid);
            close(fd[0]); // close unused read end of the pipe
            write(fd[1], message, 20);
  printf("Waiting for child processes %d to finish...", i+1);
   wait(NULL);
  printf("child process %d finished.\n", i+1);
 }
 }
 return EXIT_SUCCESS;
}

void sigint_handler(int sig)
{
 printf("ERROR! \n");
}
